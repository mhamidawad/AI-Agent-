name: 'Qodo Command Action'
description: 'Run Qodo Command agents with custom TOML and MCP configurations'
author: 'Qodo'

inputs:
  prompt:
    description: 'The prompt or command to run with Qodo'
    required: true
  model:
    description: 'Specify a custom model to use'
    required: false
  agent-file:
    description: 'Path to custom agent.toml file (defaults to the example agent.toml included with this action)'
    required: false
  agentfile:
    description: 'DEPRECATED: Use agent-file instead. Path to custom agent.toml file'
    required: false
  key-value-pairs:
    description: 'Additional key-value pairs as JSON object or multiline string'
    required: false
  qodo-version:
    description: 'Version of @qodo/command to install (defaults to latest)'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies and uvx
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y jq
        fi

        if ! command -v npx &> /dev/null; then
          echo "Error: npx is not available."
          exit 1
        fi

        if ! command -v uvx &> /dev/null; then
          echo "Installing uv..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          export PATH="$HOME/.local/bin:$PATH"
          if ! command -v uvx &> /dev/null; then
            echo "Error: uvx failed to install"
            exit 1
          fi
        fi

    - name: Install Qodo CLI
      shell: bash
      run: |
        if [ "${{ inputs.qodo-version }}" = "latest" ]; then
          npm install -g @qodo/command
        else
          npm install -g @qodo/command@${{ inputs.qodo-version }}
        fi

    - name: Run Qodo Command
      shell: bash
      run: |
        QODO_CMD="qodo --ci"

        if [ -n "${{ inputs.model }}" ]; then
          QODO_CMD="$QODO_CMD --model=${{ inputs.model }}"
        fi

        AGENT_FILE=""
        if [ -n "${{ inputs.agent-file }}" ]; then
          AGENT_FILE="${{ inputs.agent-file }}"
        elif [ -n "${{ inputs.agentfile }}" ]; then
          echo "::warning::The 'agentfile' input is deprecated. Please use 'agent-file' instead."
          AGENT_FILE="${{ inputs.agentfile }}"
        fi

        if [ -n "$AGENT_FILE" ]; then
          QODO_CMD="$QODO_CMD --agent-file=$AGENT_FILE"
        else
          QODO_CMD="$QODO_CMD --agent-file=${{ github.action_path }}/examples/agent.toml"
        fi

        if [ -n "${{ inputs.key-value-pairs }}" ]; then
          if echo "${{ inputs.key-value-pairs }}" | jq -e . > /dev/null 2>&1; then
            PAIRS=$(echo "${{ inputs.key-value-pairs }}" | jq -r 'to_entries | .[] | "--set \(.key)=\(.value)"' | tr '\n' ' ')
            QODO_CMD="$QODO_CMD $PAIRS"
          else
            while IFS= read -r line; do
              if [ -n "$line" ] && [[ "$line" == *"="* ]]; then
                QODO_CMD="$QODO_CMD --set $line"
              fi
            done <<< "${{ inputs.key-value-pairs }}"
          fi
        fi

        QODO_CMD="$QODO_CMD \"${{ inputs.prompt }}\""

        echo "Running: $QODO_CMD"
        eval $QODO_CMD

branding:
  icon: 'cpu'
  color: 'blue'
